import tkinter as tk
from tkinter import ttk
import os
import subprocess
from pathlib import Path
import json

class CheckListApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ß–µ–∫-–ª–∏—Å—Ç —Å–∏—Å—Ç–µ–º—ã")
        self.root.geometry("800x600")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.load_config()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.setup_ui()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        self.check_all()
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é"""
        try:
            with open('checklist_config.json', 'r', encoding='utf-8') as f:
                self.config = json.load(f)
        except:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            self.config = {
                "folders": [
                    {"name": "–ü–∞–ø–∫–∞ Documents", "path": os.path.expanduser("~/Documents")},
                    {"name": "–ü–∞–ø–∫–∞ Downloads", "path": os.path.expanduser("~/Downloads")},
                    {"name": "C:\\Program Files", "path": "C:\\Program Files"},
                    {"name": "C:\\Temp", "path": "C:\\Temp"}
                ],
                "programs": [
                    {"name": "Google Chrome", "exe": "chrome.exe", "paths": [
                        "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
                        "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"
                    ]},
                    {"name": "Notepad++", "exe": "notepad++.exe", "paths": [
                        "C:\\Program Files\\Notepad++\\notepad++.exe",
                        "C:\\Program Files (x86)\\Notepad++\\notepad++.exe"
                    ]},
                    {"name": "7-Zip", "exe": "7z.exe", "paths": [
                        "C:\\Program Files\\7-Zip\\7z.exe",
                        "C:\\Program Files (x86)\\7-Zip\\7z.exe"
                    ]},
                    {"name": "Python", "exe": "python.exe", "command": "python --version"},
                    {"name": "Git", "exe": "git.exe", "command": "git --version"}
                ]
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.save_config()
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        with open('checklist_config.json', 'w', encoding='utf-8') as f:
            json.dump(self.config, f, ensure_ascii=False, indent=2)
    
    def setup_ui(self):
        """–°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(self.root, text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã", 
                         font=("Arial", 16, "bold"))
        header.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = tk.Frame(self.root)
        button_frame.pack(pady=5)
        
        refresh_btn = tk.Button(button_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                               command=self.check_all, font=("Arial", 10))
        refresh_btn.pack(side=tk.LEFT, padx=5)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.create_table()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_label = tk.Label(self.root, text="–ì–æ—Ç–æ–≤–æ", 
                                    relief=tk.SUNKEN, anchor=tk.W)
        self.status_label.pack(side=tk.BOTTOM, fill=tk.X)
    
    def create_table(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        # –§—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        table_frame = tk.Frame(self.root)
        table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(table_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –°–æ–∑–¥–∞–µ–º Treeview
        self.tree = ttk.Treeview(table_frame, 
                                 columns=("Type", "Name", "Path", "Status"),
                                 show="tree headings",
                                 yscrollcommand=scrollbar.set)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã
        self.tree.heading("#0", text="‚Ññ")
        self.tree.heading("Type", text="–¢–∏–ø")
        self.tree.heading("Name", text="–ù–∞–∑–≤–∞–Ω–∏–µ")
        self.tree.heading("Path", text="–ü—É—Ç—å/–û–ø–∏—Å–∞–Ω–∏–µ")
        self.tree.heading("Status", text="–°—Ç–∞—Ç—É—Å")
        
        self.tree.column("#0", width=50)
        self.tree.column("Type", width=100)
        self.tree.column("Name", width=200)
        self.tree.column("Path", width=350)
        self.tree.column("Status", width=80)
        
        scrollbar.config(command=self.tree.yview)
        self.tree.pack(fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
        self.tree.tag_configure("found", background="#90EE90")  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        self.tree.tag_configure("notfound", background="#FFB6C1")  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
    
    def check_folder(self, folder_path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏"""
        return os.path.exists(folder_path) and os.path.isdir(folder_path)
    
    def check_program_by_path(self, paths):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ —Å–ø–∏—Å–∫—É –ø—É—Ç–µ–π"""
        for path in paths:
            if os.path.exists(path) and os.path.isfile(path):
                return True, path
        return False, ""
    
    def check_program_by_command(self, command):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
        try:
            result = subprocess.run(command, shell=True, capture_output=True, 
                                  timeout=2, text=True)
            if result.returncode == 0:
                return True, "–ù–∞–π–¥–µ–Ω–æ –≤ PATH"
            return False, ""
        except:
            return False, ""
    
    def check_all(self):
        """–í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        self.status_label.config(text="–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
        self.root.update()
        
        item_num = 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏
        for folder in self.config["folders"]:
            exists = self.check_folder(folder["path"])
            status = "‚úì –ù–∞–π–¥–µ–Ω–æ" if exists else "‚úó –ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            tag = "found" if exists else "notfound"
            
            self.tree.insert("", tk.END, text=str(item_num),
                           values=("–ü–∞–ø–∫–∞", folder["name"], folder["path"], status),
                           tags=(tag,))
            item_num += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã
        for program in self.config["programs"]:
            found = False
            found_path = ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø—É—Ç—è–º
            if "paths" in program:
                found, found_path = self.check_program_by_path(program["paths"])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
            if not found and "command" in program:
                found, found_path = self.check_program_by_command(program["command"])
            
            status = "‚úì –ù–∞–π–¥–µ–Ω–æ" if found else "‚úó –ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            tag = "found" if found else "notfound"
            path_display = found_path if found_path else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            
            self.tree.insert("", tk.END, text=str(item_num),
                           values=("–ü—Ä–æ–≥—Ä–∞–º–º–∞", program["name"], path_display, status),
                           tags=(tag,))
            item_num += 1
        
        self.status_label.config(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def main():
    root = tk.Tk()
    app = CheckListApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
